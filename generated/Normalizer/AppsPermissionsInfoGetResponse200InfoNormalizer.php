<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace JoliCode\Slack\Api\Normalizer;

use Jane\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class AppsPermissionsInfoGetResponse200InfoNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'JoliCode\\Slack\\Api\\Model\\AppsPermissionsInfoGetResponse200Info';
    }

    public function supportsNormalization($data, $format = null)
    {
        return get_class($data) === 'JoliCode\\Slack\\Api\\Model\\AppsPermissionsInfoGetResponse200Info';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        if (isset($data->{'$ref'})) {
            return new Reference($data->{'$ref'}, $context['document-origin']);
        }
        $object = new \JoliCode\Slack\Api\Model\AppsPermissionsInfoGetResponse200Info();
        if (property_exists($data, 'app_home') && $data->{'app_home'} !== null) {
            $object->setAppHome($this->denormalizer->denormalize($data->{'app_home'}, 'JoliCode\\Slack\\Api\\Model\\AppsPermissionsInfoGetResponse200InfoAppHome', 'json', $context));
        }
        if (property_exists($data, 'channel') && $data->{'channel'} !== null) {
            $object->setChannel($this->denormalizer->denormalize($data->{'channel'}, 'JoliCode\\Slack\\Api\\Model\\AppsPermissionsInfoGetResponse200InfoChannel', 'json', $context));
        }
        if (property_exists($data, 'group') && $data->{'group'} !== null) {
            $object->setGroup($this->denormalizer->denormalize($data->{'group'}, 'JoliCode\\Slack\\Api\\Model\\AppsPermissionsInfoGetResponse200InfoGroup', 'json', $context));
        }
        if (property_exists($data, 'im') && $data->{'im'} !== null) {
            $object->setIm($this->denormalizer->denormalize($data->{'im'}, 'JoliCode\\Slack\\Api\\Model\\AppsPermissionsInfoGetResponse200InfoIm', 'json', $context));
        }
        if (property_exists($data, 'mpim') && $data->{'mpim'} !== null) {
            $object->setMpim($this->denormalizer->denormalize($data->{'mpim'}, 'JoliCode\\Slack\\Api\\Model\\AppsPermissionsInfoGetResponse200InfoMpim', 'json', $context));
        }
        if (property_exists($data, 'team') && $data->{'team'} !== null) {
            $object->setTeam($this->denormalizer->denormalize($data->{'team'}, 'JoliCode\\Slack\\Api\\Model\\AppsPermissionsInfoGetResponse200InfoTeam', 'json', $context));
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getAppHome()) {
            $data->{'app_home'} = $this->normalizer->normalize($object->getAppHome(), 'json', $context);
        }
        if (null !== $object->getChannel()) {
            $data->{'channel'} = $this->normalizer->normalize($object->getChannel(), 'json', $context);
        }
        if (null !== $object->getGroup()) {
            $data->{'group'} = $this->normalizer->normalize($object->getGroup(), 'json', $context);
        }
        if (null !== $object->getIm()) {
            $data->{'im'} = $this->normalizer->normalize($object->getIm(), 'json', $context);
        }
        if (null !== $object->getMpim()) {
            $data->{'mpim'} = $this->normalizer->normalize($object->getMpim(), 'json', $context);
        }
        if (null !== $object->getTeam()) {
            $data->{'team'} = $this->normalizer->normalize($object->getTeam(), 'json', $context);
        }

        return $data;
    }
}
