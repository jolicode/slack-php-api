<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace JoliCode\Slack\Api\Normalizer;

use Jane\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class TeamAccessLogsGetResponse200LoginsItemNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'JoliCode\\Slack\\Api\\Model\\TeamAccessLogsGetResponse200LoginsItem';
    }

    public function supportsNormalization($data, $format = null)
    {
        return get_class($data) === 'JoliCode\\Slack\\Api\\Model\\TeamAccessLogsGetResponse200LoginsItem';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        if (isset($data->{'$ref'})) {
            return new Reference($data->{'$ref'}, $context['document-origin']);
        }
        $object = new \JoliCode\Slack\Api\Model\TeamAccessLogsGetResponse200LoginsItem();
        if (property_exists($data, 'count') && $data->{'count'} !== null) {
            $object->setCount($data->{'count'});
        }
        if (property_exists($data, 'country') && $data->{'country'} !== null) {
            $object->setCountry($data->{'country'});
        }
        if (property_exists($data, 'date_first') && $data->{'date_first'} !== null) {
            $object->setDateFirst($data->{'date_first'});
        }
        if (property_exists($data, 'date_last') && $data->{'date_last'} !== null) {
            $object->setDateLast($data->{'date_last'});
        }
        if (property_exists($data, 'ip') && $data->{'ip'} !== null) {
            $object->setIp($data->{'ip'});
        }
        if (property_exists($data, 'isp') && $data->{'isp'} !== null) {
            $object->setIsp($data->{'isp'});
        }
        if (property_exists($data, 'region') && $data->{'region'} !== null) {
            $object->setRegion($data->{'region'});
        }
        if (property_exists($data, 'user_agent') && $data->{'user_agent'} !== null) {
            $object->setUserAgent($data->{'user_agent'});
        }
        if (property_exists($data, 'user_id') && $data->{'user_id'} !== null) {
            $object->setUserId($data->{'user_id'});
        }
        if (property_exists($data, 'username') && $data->{'username'} !== null) {
            $object->setUsername($data->{'username'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getCount()) {
            $data->{'count'} = $object->getCount();
        }
        if (null !== $object->getCountry()) {
            $data->{'country'} = $object->getCountry();
        }
        if (null !== $object->getDateFirst()) {
            $data->{'date_first'} = $object->getDateFirst();
        }
        if (null !== $object->getDateLast()) {
            $data->{'date_last'} = $object->getDateLast();
        }
        if (null !== $object->getIp()) {
            $data->{'ip'} = $object->getIp();
        }
        if (null !== $object->getIsp()) {
            $data->{'isp'} = $object->getIsp();
        }
        if (null !== $object->getRegion()) {
            $data->{'region'} = $object->getRegion();
        }
        if (null !== $object->getUserAgent()) {
            $data->{'user_agent'} = $object->getUserAgent();
        }
        if (null !== $object->getUserId()) {
            $data->{'user_id'} = $object->getUserId();
        }
        if (null !== $object->getUsername()) {
            $data->{'username'} = $object->getUsername();
        }

        return $data;
    }
}
