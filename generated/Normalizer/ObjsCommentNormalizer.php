<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace JoliCode\Slack\Api\Normalizer;

use Jane\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class ObjsCommentNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'JoliCode\\Slack\\Api\\Model\\ObjsComment';
    }

    public function supportsNormalization($data, $format = null)
    {
        return get_class($data) === 'JoliCode\\Slack\\Api\\Model\\ObjsComment';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        if (isset($data->{'$ref'})) {
            return new Reference($data->{'$ref'}, $context['document-origin']);
        }
        $object = new \JoliCode\Slack\Api\Model\ObjsComment();
        if (property_exists($data, 'comment') && $data->{'comment'} !== null) {
            $object->setComment($data->{'comment'});
        }
        if (property_exists($data, 'created') && $data->{'created'} !== null) {
            $object->setCreated($data->{'created'});
        }
        if (property_exists($data, 'id') && $data->{'id'} !== null) {
            $object->setId($data->{'id'});
        }
        if (property_exists($data, 'is_intro') && $data->{'is_intro'} !== null) {
            $object->setIsIntro($data->{'is_intro'});
        }
        if (property_exists($data, 'is_starred') && $data->{'is_starred'} !== null) {
            $object->setIsStarred($data->{'is_starred'});
        }
        if (property_exists($data, 'num_stars') && $data->{'num_stars'} !== null) {
            $object->setNumStars($data->{'num_stars'});
        }
        if (property_exists($data, 'pinned_info') && $data->{'pinned_info'} !== null) {
            $values = new \ArrayObject([], \ArrayObject::ARRAY_AS_PROPS);
            foreach ($data->{'pinned_info'} as $key => $value) {
                $values[$key] = $this->denormalizer->denormalize($value, 'JoliCode\\Slack\\Api\\Model\\DefsPinnedInfoItem', 'json', $context);
            }
            $object->setPinnedInfo($values);
        }
        if (property_exists($data, 'pinned_to') && $data->{'pinned_to'} !== null) {
            $values_1 = [];
            foreach ($data->{'pinned_to'} as $value_1) {
                $values_1[] = $value_1;
            }
            $object->setPinnedTo($values_1);
        }
        if (property_exists($data, 'reactions') && $data->{'reactions'} !== null) {
            $values_2 = [];
            foreach ($data->{'reactions'} as $value_2) {
                $values_2[] = $this->denormalizer->denormalize($value_2, 'JoliCode\\Slack\\Api\\Model\\ObjsReaction', 'json', $context);
            }
            $object->setReactions($values_2);
        }
        if (property_exists($data, 'timestamp') && $data->{'timestamp'} !== null) {
            $object->setTimestamp($data->{'timestamp'});
        }
        if (property_exists($data, 'user') && $data->{'user'} !== null) {
            $object->setUser($data->{'user'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getComment()) {
            $data->{'comment'} = $object->getComment();
        }
        if (null !== $object->getCreated()) {
            $data->{'created'} = $object->getCreated();
        }
        if (null !== $object->getId()) {
            $data->{'id'} = $object->getId();
        }
        if (null !== $object->getIsIntro()) {
            $data->{'is_intro'} = $object->getIsIntro();
        }
        if (null !== $object->getIsStarred()) {
            $data->{'is_starred'} = $object->getIsStarred();
        }
        if (null !== $object->getNumStars()) {
            $data->{'num_stars'} = $object->getNumStars();
        }
        if (null !== $object->getPinnedInfo()) {
            $values = new \stdClass();
            foreach ($object->getPinnedInfo() as $key => $value) {
                $values->{$key} = $this->normalizer->normalize($value, 'json', $context);
            }
            $data->{'pinned_info'} = $values;
        }
        if (null !== $object->getPinnedTo()) {
            $values_1 = [];
            foreach ($object->getPinnedTo() as $value_1) {
                $values_1[] = $value_1;
            }
            $data->{'pinned_to'} = $values_1;
        }
        if (null !== $object->getReactions()) {
            $values_2 = [];
            foreach ($object->getReactions() as $value_2) {
                $values_2[] = $this->normalizer->normalize($value_2, 'json', $context);
            }
            $data->{'reactions'} = $values_2;
        }
        if (null !== $object->getTimestamp()) {
            $data->{'timestamp'} = $object->getTimestamp();
        }
        if (null !== $object->getUser()) {
            $data->{'user'} = $object->getUser();
        }

        return $data;
    }
}
