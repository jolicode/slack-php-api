<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace JoliCode\Slack\Api\Normalizer;

use Jane\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class PinsListGetResponse200Item0Normalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'JoliCode\\Slack\\Api\\Model\\PinsListGetResponse200Item0';
    }

    public function supportsNormalization($data, $format = null)
    {
        return get_class($data) === 'JoliCode\\Slack\\Api\\Model\\PinsListGetResponse200Item0';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        if (isset($data->{'$ref'})) {
            return new Reference($data->{'$ref'}, $context['document-origin']);
        }
        $object = new \JoliCode\Slack\Api\Model\PinsListGetResponse200Item0();
        if (property_exists($data, 'items') && $data->{'items'} !== null) {
            $value = $data->{'items'};
            if (is_array($data->{'items'})) {
                $values = [];
                foreach ($data->{'items'} as $value_1) {
                    $values[] = $this->denormalizer->denormalize($value_1, 'JoliCode\\Slack\\Api\\Model\\PinsListGetResponse200Item0ItemsItem0', 'json', $context);
                }
                $value = $values;
            } elseif (is_array($data->{'items'})) {
                $values_1 = [];
                foreach ($data->{'items'} as $value_2) {
                    $values_1[] = $this->denormalizer->denormalize($value_2, 'JoliCode\\Slack\\Api\\Model\\PinsListGetResponse200Item0ItemsItem1', 'json', $context);
                }
                $value = $values_1;
            } elseif (is_array($data->{'items'})) {
                $values_2 = [];
                foreach ($data->{'items'} as $value_3) {
                    $values_2[] = $this->denormalizer->denormalize($value_3, 'JoliCode\\Slack\\Api\\Model\\PinsListGetResponse200Item0ItemsItem2', 'json', $context);
                }
                $value = $values_2;
            }
            $object->setItems($value);
        }
        if (property_exists($data, 'ok') && $data->{'ok'} !== null) {
            $object->setOk($data->{'ok'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getItems()) {
            $value = $object->getItems();
            if (is_array($object->getItems())) {
                $values = [];
                foreach ($object->getItems() as $value_1) {
                    $values[] = $this->normalizer->normalize($value_1, 'json', $context);
                }
                $value = $values;
            } elseif (is_array($object->getItems())) {
                $values_1 = [];
                foreach ($object->getItems() as $value_2) {
                    $values_1[] = $this->normalizer->normalize($value_2, 'json', $context);
                }
                $value = $values_1;
            } elseif (is_array($object->getItems())) {
                $values_2 = [];
                foreach ($object->getItems() as $value_3) {
                    $values_2[] = $this->normalizer->normalize($value_3, 'json', $context);
                }
                $value = $values_2;
            }
            $data->{'items'} = $value;
        }
        if (null !== $object->getOk()) {
            $data->{'ok'} = $object->getOk();
        }

        return $data;
    }
}
