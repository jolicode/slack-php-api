<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace JoliCode\Slack\Api\Normalizer;

use Jane\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class ObjsResourcesNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'JoliCode\\Slack\\Api\\Model\\ObjsResources';
    }

    public function supportsNormalization($data, $format = null)
    {
        return get_class($data) === 'JoliCode\\Slack\\Api\\Model\\ObjsResources';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        if (isset($data->{'$ref'})) {
            return new Reference($data->{'$ref'}, $context['document-origin']);
        }
        $object = new \JoliCode\Slack\Api\Model\ObjsResources();
        if (property_exists($data, 'excluded_ids') && $data->{'excluded_ids'} !== null) {
            $values = [];
            foreach ($data->{'excluded_ids'} as $value) {
                $values[] = $value;
            }
            $object->setExcludedIds($values);
        }
        if (property_exists($data, 'ids') && $data->{'ids'} !== null) {
            $values_1 = [];
            foreach ($data->{'ids'} as $value_1) {
                $values_1[] = $value_1;
            }
            $object->setIds($values_1);
        }
        if (property_exists($data, 'wildcard') && $data->{'wildcard'} !== null) {
            $object->setWildcard($data->{'wildcard'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getExcludedIds()) {
            $values = [];
            foreach ($object->getExcludedIds() as $value) {
                $values[] = $value;
            }
            $data->{'excluded_ids'} = $values;
        }
        if (null !== $object->getIds()) {
            $values_1 = [];
            foreach ($object->getIds() as $value_1) {
                $values_1[] = $value_1;
            }
            $data->{'ids'} = $values_1;
        }
        if (null !== $object->getWildcard()) {
            $data->{'wildcard'} = $object->getWildcard();
        }

        return $data;
    }
}
