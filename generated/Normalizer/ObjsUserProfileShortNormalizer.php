<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace JoliCode\Slack\Api\Normalizer;

use Jane\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class ObjsUserProfileShortNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'JoliCode\\Slack\\Api\\Model\\ObjsUserProfileShort';
    }

    public function supportsNormalization($data, $format = null)
    {
        return get_class($data) === 'JoliCode\\Slack\\Api\\Model\\ObjsUserProfileShort';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        if (isset($data->{'$ref'})) {
            return new Reference($data->{'$ref'}, $context['document-origin']);
        }
        $object = new \JoliCode\Slack\Api\Model\ObjsUserProfileShort();
        if (property_exists($data, 'avatar_hash') && $data->{'avatar_hash'} !== null) {
            $object->setAvatarHash($data->{'avatar_hash'});
        }
        if (property_exists($data, 'display_name') && $data->{'display_name'} !== null) {
            $object->setDisplayName($data->{'display_name'});
        }
        if (property_exists($data, 'first_name') && $data->{'first_name'} !== null) {
            $object->setFirstName($data->{'first_name'});
        }
        if (property_exists($data, 'image_72') && $data->{'image_72'} !== null) {
            $object->setImage72($data->{'image_72'});
        }
        if (property_exists($data, 'is_restricted') && $data->{'is_restricted'} !== null) {
            $object->setIsRestricted($data->{'is_restricted'});
        }
        if (property_exists($data, 'is_ultra_restricted') && $data->{'is_ultra_restricted'} !== null) {
            $object->setIsUltraRestricted($data->{'is_ultra_restricted'});
        }
        if (property_exists($data, 'name') && $data->{'name'} !== null) {
            $object->setName($data->{'name'});
        }
        if (property_exists($data, 'real_name') && $data->{'real_name'} !== null) {
            $object->setRealName($data->{'real_name'});
        }
        if (property_exists($data, 'team') && $data->{'team'} !== null) {
            $object->setTeam($data->{'team'});
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getAvatarHash()) {
            $data->{'avatar_hash'} = $object->getAvatarHash();
        }
        if (null !== $object->getDisplayName()) {
            $data->{'display_name'} = $object->getDisplayName();
        }
        if (null !== $object->getFirstName()) {
            $data->{'first_name'} = $object->getFirstName();
        }
        if (null !== $object->getImage72()) {
            $data->{'image_72'} = $object->getImage72();
        }
        if (null !== $object->getIsRestricted()) {
            $data->{'is_restricted'} = $object->getIsRestricted();
        }
        if (null !== $object->getIsUltraRestricted()) {
            $data->{'is_ultra_restricted'} = $object->getIsUltraRestricted();
        }
        if (null !== $object->getName()) {
            $data->{'name'} = $object->getName();
        }
        if (null !== $object->getRealName()) {
            $data->{'real_name'} = $object->getRealName();
        }
        if (null !== $object->getTeam()) {
            $data->{'team'} = $object->getTeam();
        }

        return $data;
    }
}
