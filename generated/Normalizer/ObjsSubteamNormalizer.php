<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace JoliCode\Slack\Api\Normalizer;

use Jane\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class ObjsSubteamNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'JoliCode\\Slack\\Api\\Model\\ObjsSubteam';
    }

    public function supportsNormalization($data, $format = null)
    {
        return get_class($data) === 'JoliCode\\Slack\\Api\\Model\\ObjsSubteam';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            return null;
        }
        if (isset($data->{'$ref'})) {
            return new Reference($data->{'$ref'}, $context['document-origin']);
        }
        $object = new \JoliCode\Slack\Api\Model\ObjsSubteam();
        if (property_exists($data, 'auto_provision') && $data->{'auto_provision'} !== null) {
            $object->setAutoProvision($data->{'auto_provision'});
        }
        if (property_exists($data, 'auto_type') && $data->{'auto_type'} !== null) {
            $object->setAutoType($data->{'auto_type'});
        }
        if (property_exists($data, 'created_by') && $data->{'created_by'} !== null) {
            $object->setCreatedBy($data->{'created_by'});
        }
        if (property_exists($data, 'date_create') && $data->{'date_create'} !== null) {
            $object->setDateCreate($data->{'date_create'});
        }
        if (property_exists($data, 'date_delete') && $data->{'date_delete'} !== null) {
            $object->setDateDelete($data->{'date_delete'});
        }
        if (property_exists($data, 'date_update') && $data->{'date_update'} !== null) {
            $object->setDateUpdate($data->{'date_update'});
        }
        if (property_exists($data, 'deleted_by') && $data->{'deleted_by'} !== null) {
            $object->setDeletedBy($data->{'deleted_by'});
        }
        if (property_exists($data, 'description') && $data->{'description'} !== null) {
            $object->setDescription($data->{'description'});
        }
        if (property_exists($data, 'enterprise_subteam_id') && $data->{'enterprise_subteam_id'} !== null) {
            $object->setEnterpriseSubteamId($data->{'enterprise_subteam_id'});
        }
        if (property_exists($data, 'handle') && $data->{'handle'} !== null) {
            $object->setHandle($data->{'handle'});
        }
        if (property_exists($data, 'id') && $data->{'id'} !== null) {
            $object->setId($data->{'id'});
        }
        if (property_exists($data, 'is_external') && $data->{'is_external'} !== null) {
            $object->setIsExternal($data->{'is_external'});
        }
        if (property_exists($data, 'is_subteam') && $data->{'is_subteam'} !== null) {
            $object->setIsSubteam($data->{'is_subteam'});
        }
        if (property_exists($data, 'is_usergroup') && $data->{'is_usergroup'} !== null) {
            $object->setIsUsergroup($data->{'is_usergroup'});
        }
        if (property_exists($data, 'name') && $data->{'name'} !== null) {
            $object->setName($data->{'name'});
        }
        if (property_exists($data, 'prefs') && $data->{'prefs'} !== null) {
            $object->setPrefs($this->denormalizer->denormalize($data->{'prefs'}, 'JoliCode\\Slack\\Api\\Model\\ObjsSubteamPrefs', 'json', $context));
        }
        if (property_exists($data, 'team_id') && $data->{'team_id'} !== null) {
            $object->setTeamId($data->{'team_id'});
        }
        if (property_exists($data, 'updated_by') && $data->{'updated_by'} !== null) {
            $object->setUpdatedBy($data->{'updated_by'});
        }
        if (property_exists($data, 'user_count') && $data->{'user_count'} !== null) {
            $object->setUserCount($data->{'user_count'});
        }
        if (property_exists($data, 'users') && $data->{'users'} !== null) {
            $values = [];
            foreach ($data->{'users'} as $value) {
                $values[] = $value;
            }
            $object->setUsers($values);
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        if (null !== $object->getAutoProvision()) {
            $data->{'auto_provision'} = $object->getAutoProvision();
        }
        if (null !== $object->getAutoType()) {
            $data->{'auto_type'} = $object->getAutoType();
        }
        if (null !== $object->getCreatedBy()) {
            $data->{'created_by'} = $object->getCreatedBy();
        }
        if (null !== $object->getDateCreate()) {
            $data->{'date_create'} = $object->getDateCreate();
        }
        if (null !== $object->getDateDelete()) {
            $data->{'date_delete'} = $object->getDateDelete();
        }
        if (null !== $object->getDateUpdate()) {
            $data->{'date_update'} = $object->getDateUpdate();
        }
        if (null !== $object->getDeletedBy()) {
            $data->{'deleted_by'} = $object->getDeletedBy();
        }
        if (null !== $object->getDescription()) {
            $data->{'description'} = $object->getDescription();
        }
        if (null !== $object->getEnterpriseSubteamId()) {
            $data->{'enterprise_subteam_id'} = $object->getEnterpriseSubteamId();
        }
        if (null !== $object->getHandle()) {
            $data->{'handle'} = $object->getHandle();
        }
        if (null !== $object->getId()) {
            $data->{'id'} = $object->getId();
        }
        if (null !== $object->getIsExternal()) {
            $data->{'is_external'} = $object->getIsExternal();
        }
        if (null !== $object->getIsSubteam()) {
            $data->{'is_subteam'} = $object->getIsSubteam();
        }
        if (null !== $object->getIsUsergroup()) {
            $data->{'is_usergroup'} = $object->getIsUsergroup();
        }
        if (null !== $object->getName()) {
            $data->{'name'} = $object->getName();
        }
        if (null !== $object->getPrefs()) {
            $data->{'prefs'} = $this->normalizer->normalize($object->getPrefs(), 'json', $context);
        }
        if (null !== $object->getTeamId()) {
            $data->{'team_id'} = $object->getTeamId();
        }
        if (null !== $object->getUpdatedBy()) {
            $data->{'updated_by'} = $object->getUpdatedBy();
        }
        if (null !== $object->getUserCount()) {
            $data->{'user_count'} = $object->getUserCount();
        }
        if (null !== $object->getUsers()) {
            $values = [];
            foreach ($object->getUsers() as $value) {
                $values[] = $value;
            }
            $data->{'users'} = $values;
        }

        return $data;
    }
}
